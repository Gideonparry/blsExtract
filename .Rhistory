devtools::document()
devtools::document()
devtools::load_all()
blsExtract("2024")
payload <- list("seriesid"=c("CES3100000001","CES3132100001", "CES3132700001",
"CES3133100001", "CES3133200001", "CES3133300001",
"CES3133400001", "CES3133500001", "CES3133600001",
"CES3133700001", "CES3133900001"),
"startyear"="2024", "endyear"="2024")
response <- blsAPI::blsAPI(payload)
json <- rjson::fromJSON(response)
values <- c()
for (i in 1:11){
values[i] <- as.numeric(json$Results$series[[i]]$data[[1]]$value)
}
values
t(as.data.frame(values))
devtools::document()
devtools::load_all()
blsExtract("2024")
matrix(blsExtract("2024"),2,11)
matrix(blsExtract("2024"),2,11)[2:1,]
matrix(blsExtract("2024"),2,11, byrow = TRUE)[2:1,]
devtools::document()
devtools::load_all()
blsExtract("2024")
getwd()
devtools::document()
blsExtract("2024", "D:")
devtools::document()
blsExtract("2024", "D:")
usethis::use_gpl3_license()
class("2024")
class(2024)
class("2024" == "character")
class("2024") == "character"
devtools::load_all()
blsExtract(2024, "D:")
devtools::document()
blsExtract(2024, "D:")
blsExtract(2023, "D:")
blsExtract(2024, "x:")
blsExtract(2024, "D:")
blsExtract(1297, "D:")
blsExtract(2011, "D:")
## One or More Series, Specifying Years
payload <- list("seriesid"=c("CES3200000001","CES3231100001", "CES3232900001",
"CES3231300001", "CES3231400001", "CES3231500001",
"CES3232200001", "CES3232300001", "CES3232400001",
"CES3232500001", "CES3232600001"),
"startyear"="dfd", "endyear"="2024")
response <- blsAPI::blsAPI(payload)
json <- rjson::fromJSON(response)
## One or More Series, Specifying Years
payload <- list("seriesid"=c("CES3200000001","CES3231100001", "CES3232900001",
"CES3231300001", "CES3231400001", "CES3231500001",
"CES3232200001", "CES3232300001", "CES3232400001",
"CES3232500001", "CES3232600001"),
"startyear"="dfd", "endyear"="dfd")
response <- blsAPI::blsAPI(payload)
json <- rjson::fromJSON(response)
## One or More Series, Specifying Years
payload <- list("seriesid"=c("CES3200000001","CES3231100001", "CES3232900001",
"CES3231300001", "CES3231400001", "CES3231500001",
"CES3232200001", "CES3232300001", "CES3232400001",
"CES3232500001", "CES3232600001"),
"startyear"="2024", "endyear"="2024")
response <- blsAPI::blsAPI(payload)
json <- rjson::fromJSON(response)
## One or More Series, Specifying Years
payload <- list("seriesid"=c("CES3200000001","CES3231100001", "CES3232900001",
"CES3231300001", "CES3231400001", "CES3231500001",
"CES3232200001", "CES3232300001", "CES3232400001",
"CES3232500001", "CES3232600001"),
"startyear"="2024", "endyear"="2024")
response <- blsAPI::blsAPI(payload)
json <- rjson::fromJSON(response)
response
class(response)
# Example string and substring
string <- "Hello, world!"
substring <- "world"
# Check if the substring is in the string
contains <- grepl(substring, string)
print(contains)
## One or More Series, Specifying Years
payload <- list("seriesid"=c("CES3200000001","CES3231100001", "CES3232900001",
"CES3231300001", "CES3231400001", "CES3231500001",
"CES3232200001", "CES3232300001", "CES3232400001",
"CES3232500001", "CES3232600001"),
"startyear"="2024", "endyear"="2024")
response <- blsAPI::blsAPI(payload)
## One or More Series, Specifying Years
payload <- list("seriesid"=c("CES3200000001","CES3231100001", "CES3232900001",
"CES3231300001", "CES3231400001", "CES3231500001",
"CES3232200001", "CES3232300001", "CES3232400001",
"CES3232500001", "CES3232600001"),
"startyear"="2024", "endyear"="2024")
response <- blsAPI::blsAPI(payload)
grepl(response, "FAILED")
response <- blsAPI::blsAPI(payload)
response
as.character(response)
response <- blsAPI::blsAPI(payload)
## One or More Series, Specifying Years
payload <- list("seriesid"=c("CES3200000001","CES3231100001", "CES3232900001",
"CES3231300001", "CES3231400001", "CES3231500001",
"CES3232200001", "CES3232300001", "CES3232400001",
"CES3232500001", "CES3232600001"),
"startyear"="1776", "endyear"="1776")
response <- blsAPI::blsAPI(payload)
response
## One or More Series, Specifying Years
payload <- list("seriesid"=c("CES3200000001","CES3231100001", "CES3232900001",
"CES3231300001", "CES3231400001", "CES3231500001",
"CES3232200001", "CES3232300001", "CES3232400001",
"CES3232500001", "CES3232600001"),
"startyear"="1776", "endyear"="1776")
response <- blsAPI::blsAPI(payload)
View(payload)
json <- rjson::fromJSON(response)
values <- c()
for (i in 1:11){
values[i] <- as.numeric(json$Results$series[[i]]$data[[1]]$value)
}
values
response
grepl("X", "2X")
grepl("No Data Available for Series", response)
payload <- list("seriesid"=c("CES3100000001","CES3132100001", "CES3132700001",
"CES3133100001", "CES3133200001", "CES3133300001",
"CES3133400001", "CES3133500001", "CES3133600001",
"CES3133700001", "CES3133900001"),
"startyear"="2024", "endyear"="2024")
response <- blsAPI::blsAPI(payload)
grepl("No Data Available for Series", response)
devtools::document()
devtools::load_all()
blsExtract(1776)
blsExtract(2024)
blsExtract(2024, "D:")
library(rjson)
library(terra)
showTmpFiles()
library(raster)
showTmpFiles()
tmpFiles(current=TRUE, orphan=TRUE, old=TRUE, remove=FALSE)
tmpFiles(current=TRUE, orphan=TRUE, old=TRUE, remove=FALSE)
tmpFiles(old = TRUE)
tmpFiles(current=TRUE, orphan=TRUE, old=TRUE, remove=TRUE)
install.packages("devtools")
devtools::document()
library(devtools)
install_github("mikeasilva/blsAPI")
blsExtract(1902, "D:")
blsExtract(2002, "D:")
blsExtract(2002, "v:")
file.exists("D:")
dir.exists()
dir.exists("D:")
dir.exists("D")
dir.exists("D":/)
dir.exists(file.path("D:"))
dir.exists(file.path("D:/spatial_project"))
dir.exists(file.path("D/spatial_project"))
dir.exists(file.path("D"))
dir.exists(file.path("D:/"))
dir.exists(file.path("D:/spatial_project"))
dir.exists(file.path("D:/spatial_project/"))
devtools::document()
blsExtract(2024, create_csv = FALSE)
file_path = "D:"
paste(file_path,
"/", sep = "")
dir.exists(file.path(paste(file_path,
"/", sep = "")))
file_path = "C:/Users/Owner"
dir.exists(file.path(paste(file_path,
"/", sep = "")))
file_path = "C:/Users/Owner/"
dir.exists(file.path(paste(file_path,
"/", sep = "")))
file_path = "C:/Users/Owner//"
dir.exists(file.path(paste(file_path,
"/", sep = "")))
devtools::document()
blsExtract(2024, "X")
?stopifnot
devtools::document()
blsExtract(2024, "X")
blsExtract(2024, create_csv = FALSE)
blsExtract(2024, "D:")
blsExtract(1824, "D:")
blsExtract(2024, "D:")
devtools::document()
file_path = NULL
(dir.exists(file.path(paste(file_path,
"/", sep = ""))))
(dir.exists(file.path("/")))
(dir.exists(file.path("D:")))
(dir.exists(file.path(NULL)))
devtools::document()
blsExtract(2024)
NULL == NULL
devtools::document()
blsExtract(2024)
blsExtract <- function(year, file_path = "INVALID FILE PATH",
create_csv = TRUE) {
## One or More Series, Specifying Years
if(create_csv){
if(!(dir.exists(file.path(file_path)))){
stop("Enter a valid file path or set create_csv = FALSE")
}
}
payload <- list("seriesid"=c("CES3200000001","CES3231100001", "CES3232900001",
"CES3231300001", "CES3231400001", "CES3231500001",
"CES3232200001", "CES3232300001", "CES3232400001",
"CES3232500001", "CES3232600001", "CES3100000001",
"CES3132100001", "CES3132700001", "CES3133100001",
"CES3133200001", "CES3133300001", "CES3133400001",
"CES3133500001", "CES3133600001", "CES3133700001",
"CES3133900001"),
"startyear" = year, "endyear" = year)
response <- blsAPI::blsAPI(payload)
if(grepl("No Data Available for Series", response)){
stop("Please enter a valid year containing data")
}
json <- rjson::fromJSON(response)
values <- c()
for (i in 1:22){
values[i] <- as.numeric(json$Results$series[[i]]$data[[1]]$value)
}
vals_data <- as.data.frame(matrix(values, 2, 11, byrow = TRUE)[2:1,])
rownames(vals_data) = c("dg", "ndg")
if(create_csv){
write.csv(vals_data, paste(file_path, "new_vals.csv", sep = "/"))
}
vals_data
}
file_name = "dfsdf"
paste(file_name, "csv", sep = ".")
devtools::document()
devtools::document()
emplSeries(2024, create_csv = FALSE)
emplSeries(2024, "D:")
emplSeries(2024, "D:/")
emplSeries(2024, "D:/certs")
devtools::document()
